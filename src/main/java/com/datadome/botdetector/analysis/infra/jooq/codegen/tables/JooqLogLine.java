/*
 * This file is generated by jOOQ.
 */
package com.datadome.botdetector.analysis.infra.jooq.codegen.tables;


import com.datadome.botdetector.analysis.infra.jooq.codegen.Indexes;
import com.datadome.botdetector.analysis.infra.jooq.codegen.Public;
import com.datadome.botdetector.analysis.infra.jooq.codegen.tables.records.LogLineRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqLogLine extends TableImpl<LogLineRecord> {

    private static final long serialVersionUID = -719329829;

    /**
     * The reference instance of <code>PUBLIC.LOG_LINE</code>
     */
    public static final JooqLogLine T_LOG_LINE = new JooqLogLine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogLineRecord> getRecordType() {
        return LogLineRecord.class;
    }

    /**
     * The column <code>PUBLIC.LOG_LINE.IP</code>.
     */
    public final TableField<LogLineRecord, String> IP = createField(DSL.name("IP"), org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LOG_LINE.USER_AGENT</code>.
     */
    public final TableField<LogLineRecord, String> USER_AGENT = createField(DSL.name("USER_AGENT"), org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LOG_LINE.DATE</code>.
     */
    public final TableField<LogLineRecord, OffsetDateTime> DATE = createField(DSL.name("DATE"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LOG_LINE.REFERER</code>.
     */
    public final TableField<LogLineRecord, String> REFERER = createField(DSL.name("REFERER"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>PUBLIC.LOG_LINE</code> table reference
     */
    public JooqLogLine() {
        this(DSL.name("LOG_LINE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG_LINE</code> table reference
     */
    public JooqLogLine(String alias) {
        this(DSL.name(alias), T_LOG_LINE);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG_LINE</code> table reference
     */
    public JooqLogLine(Name alias) {
        this(alias, T_LOG_LINE);
    }

    private JooqLogLine(Name alias, Table<LogLineRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqLogLine(Name alias, Table<LogLineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JooqLogLine(Table<O> child, ForeignKey<O, LogLineRecord> key) {
        super(child, key, T_LOG_LINE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_LOG_LINE__IP);
    }

    @Override
    public JooqLogLine as(String alias) {
        return new JooqLogLine(DSL.name(alias), this);
    }

    @Override
    public JooqLogLine as(Name alias) {
        return new JooqLogLine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqLogLine rename(String name) {
        return new JooqLogLine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqLogLine rename(Name name) {
        return new JooqLogLine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, OffsetDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
