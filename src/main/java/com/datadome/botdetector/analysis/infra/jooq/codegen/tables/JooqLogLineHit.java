/*
 * This file is generated by jOOQ.
 */
package com.datadome.botdetector.analysis.infra.jooq.codegen.tables;


import com.datadome.botdetector.analysis.infra.jooq.codegen.Keys;
import com.datadome.botdetector.analysis.infra.jooq.codegen.Public;
import com.datadome.botdetector.analysis.infra.jooq.codegen.tables.records.LogLineHitRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqLogLineHit extends TableImpl<LogLineHitRecord> {

    private static final long serialVersionUID = 1042268906;

    /**
     * The reference instance of <code>PUBLIC.LOG_LINE_HIT</code>
     */
    public static final JooqLogLineHit T_LOG_LINE_HIT = new JooqLogLineHit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogLineHitRecord> getRecordType() {
        return LogLineHitRecord.class;
    }

    /**
     * The column <code>PUBLIC.LOG_LINE_HIT.IP</code>.
     */
    public final TableField<LogLineHitRecord, String> IP = createField(DSL.name("IP"), org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LOG_LINE_HIT.DATE</code>.
     */
    public final TableField<LogLineHitRecord, OffsetDateTime> DATE = createField(DSL.name("DATE"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.LOG_LINE_HIT</code> table reference
     */
    public JooqLogLineHit() {
        this(DSL.name("LOG_LINE_HIT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG_LINE_HIT</code> table reference
     */
    public JooqLogLineHit(String alias) {
        this(DSL.name(alias), T_LOG_LINE_HIT);
    }

    /**
     * Create an aliased <code>PUBLIC.LOG_LINE_HIT</code> table reference
     */
    public JooqLogLineHit(Name alias) {
        this(alias, T_LOG_LINE_HIT);
    }

    private JooqLogLineHit(Name alias, Table<LogLineHitRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqLogLineHit(Name alias, Table<LogLineHitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JooqLogLineHit(Table<O> child, ForeignKey<O, LogLineHitRecord> key) {
        super(child, key, T_LOG_LINE_HIT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LogLineHitRecord> getPrimaryKey() {
        return Keys.LOG_LINE_HIT_PK;
    }

    @Override
    public List<UniqueKey<LogLineHitRecord>> getKeys() {
        return Arrays.<UniqueKey<LogLineHitRecord>>asList(Keys.LOG_LINE_HIT_PK);
    }

    @Override
    public JooqLogLineHit as(String alias) {
        return new JooqLogLineHit(DSL.name(alias), this);
    }

    @Override
    public JooqLogLineHit as(Name alias) {
        return new JooqLogLineHit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqLogLineHit rename(String name) {
        return new JooqLogLineHit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqLogLineHit rename(Name name) {
        return new JooqLogLineHit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, OffsetDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
